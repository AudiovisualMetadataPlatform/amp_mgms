# This is the default test suite -- local tools

- name: Adjust Diarization Timestamps
  tool: mgms/adjust_diarization_timestamps.xml
  inputs:
    amp_diarization_unadjusted: amp_diarization.json
    kept_segments: amp_kept_segments.json
  outputs:
    amp_diarization_adjusted:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [segments, numSpeakers, media]}

- name: Adjust Transcript Timestamps
  tool: amp/adjust_transcript_timestamps.xml
  inputs:
    amp_transcript_unadjusted: amp_transcript_aws.json
    kept_segments: amp_kept_segments.json
  outputs:
    amp_transcript_adjusted:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [results, words, score, start, end]}


- name: Applause Detection
  tool: applause_detection/applause_detection.xml
  inputs:
    input_audio: audio.mp3
  params:
    min_segment_duration: 3000
  outputs:
    amp_applause_segments:
      - {test: magic, mime: application/json}
      - {test: strings, strings: [segments, label, start, end]}      

#- name: Contact Sheets - shot
#  tool: contact_sheets.xml
#  inputs:
#    input_video: video.m4v
#    amp_shots: amp_shots.json
#  params:
#    type: shot
#    amp_faces: none
#    frame_seconds: 0
#    frame_quantity: 0
#    number_of_columns: 4
#    photo_width: 300
#    margin: 10
#    padding: 3
#  outputs:
#    contact_sheet:
#      - {test: magic, mime: image/png}

#- name: Contact Sheets - time
#  tool: contact_sheets.xml
#  inputs:
#    input_video: video.m4v    
#  params:
#    type: time
#    amp_shots: ""
#    amp_faces: ""
#    frame_seconds: 10
#    frame_quantity: 0
#    number_of_columns: 4
#    photo_width: 300
#    margin: 10
#    padding: 3
#  outputs:
#    contact_sheet:
#      - {test: magic, mime: image/png}

#- name: Contact Sheets - quantity
#  tool: contact_sheets.xml
#  inputs:
#    input_video: video.m4v    
#  params:
#    type: quantity
#    amp_shots: ""
#    amp_faces: ""
#    frame_seconds: 0
#    frame_quantity: 10
#    number_of_columns: 4
#    photo_width: 300
#    margin: 10
#    padding: 3
#  outputs:
#    contact_sheet:
#      - {test: magic, mime: image/png}


- name: Extract Audio
  tool: mgms/extract_audio.xml
  inputs:
    input_av: video.m4v
  outputs:
    audio_extracted:
      - {test: ffprobe, path: "streams/stream[1]", attrib: 'codec_name', value: "pcm_s16le"}
      - {test: ffprobe, path: "streams/stream[1]", attrib: 'sample_rate', value: "44100"}
      - {test: ffprobe, path: "streams/stream[1]", attrib: 'channels', value: "1"}
      - {test: ffprobe, path: "format", attrib: "format_name", value: "wav"}
  params:    
    rate: 44100
    channels: 1
    sample_format: pcm_s16le


- name: INA Speech Segmenter
  tool: ina_speech_segmenter/ina_speech_segmenter.xml
  inputs:
    input_audio: audio.mp3
  outputs:
    amp_segments:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [segments, silence, gender, start, end]}

- name: Kaldi
  tool: kaldi/kaldi.xml
  inputs:
    input_audio: audio.mp3
  outputs:
    kaldi_transcript_text:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: "celebration of specialness"}
    kaldi_transcript_json:
      - {test: magic, mime: application/json}
      - {test: strings, strings: "duration"}
    amp_transcript:
      - {test: magic, mime: application/json}
      - {test: strings, strings: "celebration of specialness"}

- name: Keep Speech
  tool: mgms/keep_speech.xml
  inputs:
    original_audio: audio.wav
    amp_segments: amp_segments.json
  outputs:
    speech_audio:
      - {test: pass, status: true}
    kept_segments:
      - {test: magic, mime: text/plain}  


- name: NER to CSV
  tool: mgms/ner_to_csv.xml
  inputs:
    amp_entities: amp_entities.ner
  outputs:
    amp_csv_entities:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [Type, Text, Begin Offset, End Offset, Start Time, Score Type, Score Value]}


- name: PyScene Detect
  tool: mgms/pyscenedetect.xml
  inputs:
    input_video: video.m4v
  params:
    threshold: 30
  outputs:
    amp_shots:
      - {test: magic, mime: text/plain}
      - {test: json, path: shots/i0/type, value: shot}
      - {test: json, path: shots/i0/start, value: "0.0"}
    frame_stats:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [Frame Number, Timecode, content_val, delta_hue, delta_lum, delta_sat]}

- name: Remove Silence Music Speech
  tool: mgms/remove_silence_speech.xml
  inputs:
    original_audio: audio.wav
    amp_segments: amp_segments.json
  outputs:
    music_audio:
      - {test: pass, status: true}
    kept_segments:
      - {test: magic, mime: text/plain}


- name: Remove Trailing Silence
  tool: mgms/remove_trailing_silence.xml
  inputs:
    input_av: audio.mp3
  outputs:
    audio_trimed:
      - {test: ffprobe, path: "format", attrib: "format_name", value: "wav"}
      - {test: ffprobe, path: "format", attrib: "duration", value: "42.994875"}
    
- name: Spacy
  tool: mgms/spacy.xml
  inputs:
    amp_transcript: amp_transcript_aws.json
  params:
    ignore_types: QUANTITIES
  outputs:
    spacy_entities:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [sents, tokens]}
    amp_entities:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [media, entities]}


- name: Tesseract
  tool: mgms/tesseract.xml
  inputs:
    input_video: video.m4v
  outputs:
    amp_vocr:
      - {test: magic, mime: text/plain}
      - {test: size, size: 61388}      
      - {test: strings, strings: ["TRUE", "STORIES", "VIRGIL"]}

- name: Transcript to WebVTT
  tool: mgms/transcript_to_webvtt.xml
  inputs:
    amp_diarization: amp_diarization.json
    amp_transcript: amp_transcript_aws.json
  outputs:
    web_vtt:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [WEBVTT, spk_0, multipurpose]}

- name: Vocabulary Tagging
  tool: mgms/vocabulary_tagging.xml
  inputs:
    amp_transcript: amp_transcript_aws.json
    tag_vocabulary: amp_words.txt
  outputs:
    tagged_words:
      - {test: magic, mime: text/plain}
      - {test: strings, strings: [Word, Start]}

- name: VOCR to CSV
  tool: mgms/vocr_to_csv.xml
  skip: This was broken in the pre-refactored code, and remains so now.
  inputs:
    amp_vocr: vocr.json
  outputs:
    amp_vocr_csv:
      - {test: magic, mime: text/plain}
      # probably should add more tests when this actually works...


